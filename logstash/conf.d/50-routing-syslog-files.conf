filter {
  if [type] =~ /^syslog-files$/ {


    # Parse logs with a single grok filter

    grok {
      patterns_dir => [ "/etc/logstash/patterns/custom-syslog-patterns" ]
      match => {
        "message" => [
          "%{CISCO_TRACEBACK}",
          "%{CISCO_SYSLOG}",
          "%{YEARFIRST_SYSLOG}",
          "%{STD_SYSLOG}",
          "%{SIMPLE_SYSLOG}",
          "%{ISO8601_SYSLOG}",
          "%{MINIMAL_SYSLOG}"
        ]
      }
      overwrite => ["message"]
      tag_on_failure => ["_grokparsefailure_syslog_format"]
    }

    if "_grokparsefailure_syslog_format" not in [tags] {
      mutate {
        add_tag => ["routing_syslog_files_patterns_grok_success"]
      }
    }


    ### identifikace logstash parseru (logstash_host)

    mutate {
      copy => { "host" => "logstash_host" }
      add_tag => ["logstash_host_copied"]
    }


    ### Mapování polí na ECS (oddělené mutate bloky)

    # Map fields to ECS - Host
    mutate {
      rename => { "host" => "host.name" }
    }

    # Map fields to ECS - Program
    mutate {
      copy => { "program" => "process.name" }
      add_tag => ["process_name_copied"]
    }

    # Map fields to ECS - PID
    mutate {
      rename => { "pid" => "process.pid" }
    }


    ### Získání IP zdroje z cesty souboru do source.ip

    grok {
      match => {
        "[log][file][path]" => ".*/%{IP:source.ip}-%{GREEDYDATA}"
      }
      overwrite => ["source.ip"]
      tag_on_failure => ["_grokparsefailure_source_ip_from_path"]
    }


    ### Kopie source.ip do custom origin_ip

    if [source.ip] {
      mutate {
        copy => { "source.ip" => "origin_ip" }
        add_tag => ["origin_ip_extracted"]
      }
    } else {
      mutate {
        add_tag => ["_origin_ip_not_extracted"] # Debug tag if IP not found
      }
    }


    ### Získání origin_fqdn (block runs only if source.ip was successfully extracted)

    if [source.ip] {
      mutate {
        copy => { "source.ip" => "temp_ip" }
        add_tag => ["temp_ip_created"]
      }
      dns {
        reverse => [ "temp_ip" ]
        action => "replace"
        hit_cache_size => 8192
        hit_cache_ttl => 512
      }

      # Pokud temp_ip obsahuje FQDN (není to tedy IP adresa), přesuneme ho do source.fqdn
      if [temp_ip] and [temp_ip] !~ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ {
        mutate {
          add_tag => ["temp_ip_converted"]
        }
        # Kopírování do origin_fqdn a source.fqdn
        mutate {
          copy => { "temp_ip" => "origin_fqdn" }
          add_tag => ["origin_fqdn_copied"]
        }
        mutate {
          copy => { "temp_ip" => "source.fqdn" }
          add_tag => ["source_fqdn_copied"]
        }
        # Odstranění temp_ip
        mutate {
          remove_field => ["temp_ip"]
          add_tag => ["temp_ip_removed"]
        }
      } else {
        mutate {
          add_tag => ["_origin_fqdn_not_resolved"]
          remove_field => ["temp_ip"]
        }
      }
    }


    ### Add syslog priority to log.level (ECS)

    if [syslog_pri] {
      syslog_pri {
        remove_field => ["syslog_pri"]
      }
    }


    # Handle timestamp parsing

    if [month] and [day] and [time] {
      mutate {
        add_field => { "reconstructed_timestamp" => "%{month} %{day} %{time}" }
      }

      if [year] {
        mutate {
          replace => { "reconstructed_timestamp" => "%{month} %{day} %{year} %{time}" }
        }
      }

      date {
        match => [
          "reconstructed_timestamp",
          # Add the most detailed format first (with year and milliseconds)
          "MMM dd YYYY HH:mm:ss.SSS",
          "MMM  d YYYY HH:mm:ss.SSS",
          "MMM dd YYYY HH:mm:ss",
          "MMM  d YYYY HH:mm:ss",
          # Then formats without explicit year (year will be derived as current)
          "MMM dd HH:mm:ss.SSS",
          "MMM  d HH:mm:ss.SSS",
          "MMM dd HH:mm:ss",
         "MMM  d HH:mm:ss"
        ]
        target => "@timestamp"
        locale => "en"
        timezone => "Europe/Prague"
        tag_on_failure => ["_timestamp_parse_failure"]
      }
    } else {
      # If the necessary timestamp components (month, day, time) are not extracted
      mutate {
        add_tag => ["_grok_did_not_extract_timestamp_components"]
      }
    }


    ### set 'type' field and add success/failure tags for overall parsing result.

    if "_grokparsefailure_syslog_format" in [tags] {
      mutate {
        replace => { "type" => "test-parser-failed" }
        add_tag => ["failed_main_grok"]
      }
    } else {
      mutate {
        replace => { "type" => "test-parser-ok" }
        add_tag => ["success_main_grok"]
      }
    }


    ### routovani pro dalsi zpracovani

    if [source.fqdn] =~ /\.net\.vzp\.cz$/ {
      mutate {
        replace => { "type" => "syslog-net" }
      }
      drop {
        percentage => 50
      }
    }
    else if [process.name] == "VZP_security_AL" {
      mutate {
        replace => { "type" => "syslog-proxy-files" }
      }
    }
    else if [source.fqdn] =~ /\.dc\.vzp\.cz$/ {
      mutate { remove_field => "[host.name]" } # kompatibilita s ECS (text vs objekt)
      mutate {
        replace => { "type" => "syslog-unix" }
      }
    }
    else if [source.fqdn] =~ /\.srv\.vzp\.cz$/ {
      mutate { remove_field => "[host.name]" } # kompatibilita s ECS (text vs objekt)
      mutate {
        replace => { "type" => "syslog-unix" }
      }
   }

  }
}


### Temporary output for debugging failed parses

output {
  if [type] == "test-parser-failed" {
    file {
      path => "/var/log/logstash/failed-parses.log"
      codec => json_lines
    }
  }
}

